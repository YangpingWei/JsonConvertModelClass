//
//  NSObject+WWModel.h
//  Coding
//
//  Created by WitChan on 16/8/30.
//  Copyright © 2016年 WitChan.com. All rights reserved.
//

#import "NSObject+WWModel.h"
#import <objc/runtime.h>

static inline void swizzleSelector(Class theClass, SEL originalSelector, SEL swizzledSelector) {
    Method originalMethod = class_getInstanceMethod(theClass, originalSelector);
    Method swizzledMethod = class_getInstanceMethod(theClass, swizzledSelector);
    method_exchangeImplementations(originalMethod, swizzledMethod);
}

@implementation NSObject (WWModel)

+ (void)load {
    swizzleSelector([NSObject class], @selector(initWithCoder:), @selector(swizzle_initWithCoder:));
    swizzleSelector([NSObject class], @selector(encodeWithCoder:), @selector(swizzle_encodeWithCoder:));
}

#pragma mark - Public

+ (instancetype)modelWithDictionary:(NSDictionary *)dictionary {
    id object = [[self alloc] init];
    [object generateObject:object data:dictionary];
    return object;
}

- (NSArray *)propertyList {
    unsigned int propertyCount;
    objc_property_t *propertyList = class_copyPropertyList([self class], &propertyCount);

    NSMutableArray *propertyNames = [NSMutableArray array];

    for (int i=0; i<propertyCount; i++) {
        objc_property_t property = propertyList[i];
        NSString *name = [NSString stringWithUTF8String:property_getName(property)];
        [propertyNames addObject:name];
    }
    return propertyNames;
}


#pragma mark - NSCoding

- (nullable instancetype)swizzle_initWithCoder:(NSCoder *)aDecoder {

    id obj = [self init];

    for (NSString *name in [obj propertyList]) {
        id value = [aDecoder decodeObjectForKey:name];
        [obj setValue:value forKey:name];
    }
    return obj;
}


- (void)swizzle_encodeWithCoder:(NSCoder *)aCoder {
    for (NSString *name in [self propertyList]) {
        [aCoder encodeObject:[self valueForKey:name] forKey:name];
    }
}


#pragma mark - Private

- (NSString *)convertKeyWithValue:(id)value key:(NSString *)key {

    NSString *className = NSStringFromClass([value class]);

    if ([value isKindOfClass:[NSString class]]) {
        return [@"str_" stringByAppendingString:key];
    } else if ([className isEqualToString:@"__NSCFArray"]) {
        return [@"arr_" stringByAppendingString:key];
    } else if ([className isEqualToString:@"__NSCFDictionary"]) {
        return [key stringByAppendingString:@"Model"];
    } else if ([className isEqualToString:@"__NSCFBoolean"]) {
        return [@"b_" stringByAppendingString:key];
    } else if ([className isEqualToString:@"__NSCFNumber"]) {
        return [@"n_" stringByAppendingString:key];
    } else {
        return [@"id_" stringByAppendingString:key];
    }
}

- (void)generateObject:(id)object data:(id)data {

    if ([data isKindOfClass:[NSDictionary class]]) {

        for (NSString *tempKey in [data allKeys]) {

            NSString *key = [self convertKeyWithValue:data[tempKey] key:tempKey];

            objc_property_t property = class_getProperty([object class], [key UTF8String]);
            if (!property) {
                continue;
            }

            id value = data[tempKey];

            if ([value isKindOfClass:[NSArray class]]) {

                NSMutableArray *subObjects = [NSMutableArray array];
                NSString *className = [NSString stringWithFormat:@"WW%@Model", tempKey.capitalizedString];

                for (int i=0; i<[value count]; i++) {
                    id subObject = [[NSClassFromString(className) alloc] init];
                    [self generateObject:subObject data:value[i]];
                    [subObjects addObject:subObject];
                }

                [object setValue:subObjects forKey:key];
            } else if ([value isKindOfClass:[NSDictionary class]]) {
                NSString *className = [NSString stringWithFormat:@"WW%@Model", tempKey.capitalizedString];
                id subObject = [[NSClassFromString(className) alloc] init];
                [self generateObject:subObject data:value];
                [object setValue:subObject forKey:key];
            } else {
                [object setValue:value forKey:key];
            }
        }
    }

    if ([data isKindOfClass:[NSData class]]) {
        NSLog(@"%s \n generate Error", __func__);
    }
}

@end
